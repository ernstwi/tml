#!/usr/bin/env node

// This program reads TML-SYNC IR and outputs Uppaal XTA.
// Usage: ./ir-to-xta <IR-1> <IR-2> ... <IR-n>

let fs = require('fs');

let files = process.argv.splice(2);
let irs = files.map(f => JSON.parse(fs.readFileSync(f)));
let channels = new Set();
irs.forEach(ir => ir.channels.forEach(c => channels.add(c)));
files.forEach((f, i) => irs[i].name = f.replace(/\.[^\.]*$/, ''));

console.log(`chan ${[...channels].join(', ')};\n`);

irs.forEach(ir => {
    console.log(`process ${ir.name}() {`);
    if (ir.clocks.length > 0)
        console.log(`    clock ${ir.clocks.join(', ')};\n`);
    console.log(`    state`);
    console.log(`${ir.locations.map(l => `        ${l.id}${l.invariant == null ? '' : ` { ${l.invariant} }`}`).join(',\n')};\n`);
    console.log(`    init ${ir.locations.filter(l => l.initial == true)[0].id};\n`);
    if (ir.edges.length > 0) {
        console.log(`    trans`);
        console.log(`${ir.edges.map(e => `        ${e.from} -> ${e.to} {${e.guard == null ? '' : `
            guard ${e.guard};`}${e.sync == null ? '' : `
            sync ${e.sync.id}${e.sync.type == 'input' ? '?' : '!'};`}${e.reset == null ? '' : `
            assign ${e.reset.map(c => `${c} := 0`).join(', ')};`}
        }`).join(',\n')};`);
    }
    console.log('}\n');
});

console.log(`system ${irs.map(ir => ir.name).join(', ')};`);
